public class ArrayRotation {
    
    public static void rotate(int[] nums, int k) {
        int n = nums.length;
        k = k % n;  // Normalize k to avoid unnecessary rotations

        // If k == 0, the array doesn't need to be rotated
        if (k == 0) {
            return;
        }

        reverse(nums, 0, n - 1);
        
        reverse(nums, 0, k - 1);
        
        reverse(nums, k, n - 1);
    }
    
    private static void reverse(int[] nums, int start, int end) {
        while (start < end) {
            // Swap the elements at start and end
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }

    // Main method to test the rotation
    public static void main(String[] args) {
        int[] nums = {1, 2, 3, 4, 5, 6, 7};
        int k = 7;

        System.out.println("Original array: ");
        for (int num : nums) {
            System.out.print(num + " ");
        }
        
        rotate(nums, k);
        
        System.out.println("\nArray after rotation by " + k + " steps: ");
        for (int num : nums) {
            System.out.print(num + " ");
        }
    }
}

Time complexity: O(n) 
Space COmplexity : O(1


